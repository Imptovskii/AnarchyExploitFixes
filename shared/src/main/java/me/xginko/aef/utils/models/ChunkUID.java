package me.xginko.aef.utils.models;

import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.jetbrains.annotations.Nullable;

import java.util.UUID;

public final class ChunkUID {

    private final long mostSigBits, leastSigBits;
    private final int x, z;

    public static ChunkUID of(Chunk chunk) {
        final UUID worldUID = chunk.getWorld().getUID();
        return new ChunkUID(worldUID.getMostSignificantBits(), worldUID.getLeastSignificantBits(), chunk.getX(), chunk.getZ());
    }

    private ChunkUID(long mostSigBits, long leastSigBits, int x, int z) {
        this.mostSigBits = mostSigBits;
        this.leastSigBits = leastSigBits;
        this.x = x;
        this.z = z;
    }

    public long getMostSigBits() {
        return mostSigBits;
    }

    public long getLeastSigBits() {
        return leastSigBits;
    }

    public int getX() {
        return x;
    }

    public int getZ() {
        return z;
    }

    public @Nullable Chunk getChunk() {
        World world = Bukkit.getWorld(new UUID(mostSigBits, leastSigBits));
        return world == null ? null : world.getChunkAt(x, z, false);
    }

    @Override
    public String toString() {
        Chunk chunk = getChunk();
        return "[ x: "+x+", z:"+z+" world: "+(chunk != null ? chunk.getWorld().getName() : "invalid")+" ]";
    }

    @Override
    public int hashCode() {
        long hilo = mostSigBits ^ leastSigBits;
        int result = ((int)(hilo >> 32)) ^ (int) hilo;
        result = 31 * result + x; // The use of 31 as a multiplier is a common practice in hash code implementations
        result = 31 * result + z; // because it is an odd prime and helps distribute the hash values more uniformly.
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (null == obj || obj.getClass() != ChunkUID.class)
            return false;
        ChunkUID id = (ChunkUID)obj;
        return id.x == this.x && id.z == this.z && id.mostSigBits == this.mostSigBits && id.leastSigBits == this.leastSigBits;
    }
}
