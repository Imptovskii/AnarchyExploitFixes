package me.xginko.aef.utils.models;

import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.util.NumberConversions;

import java.util.Objects;
import java.util.UUID;

public class BlockRegion2D {

    private final long mostSigBits, leastSigBits;
    private final double radius, radiusSquared, centerX, centerZ;

    public BlockRegion2D(long mostSigBits, long leastSigBits, double centerX, double centerZ, double radius) {
        this.mostSigBits = mostSigBits;
        this.leastSigBits = leastSigBits;
        this.centerX = centerX;
        this.centerZ = centerZ;
        this.radius = radius;
        this.radiusSquared = NumberConversions.square(radius);
    }

    public static BlockRegion2D of(UUID worldUID, double centerX, double centerZ, double radius) {
        return new BlockRegion2D(worldUID.getMostSignificantBits(), worldUID.getLeastSignificantBits(), centerX, centerZ, radius);
    }

    public static BlockRegion2D of(World world, double centerX, double centerZ, double radius) {
        return BlockRegion2D.of(world.getUID(), centerX, centerZ, radius);
    }

    public long getMostSigBits() {
        return mostSigBits;
    }

    public long getLeastSigBits() {
        return leastSigBits;
    }

    public double getRadius() {
        return radius;
    }

    public double getRadiusSquared() {
        return radiusSquared;
    }

    public double getCenterX() {
        return centerX;
    }

    public double getCenterZ() {
        return centerZ;
    }

    @Override
    public boolean equals(Object obj) {
        if (null == obj || obj.getClass() != BlockRegion2D.class)
            return false;
        BlockRegion2D id = (BlockRegion2D)obj;
        return id.mostSigBits == this.mostSigBits && id.leastSigBits == this.leastSigBits && id.centerX == this.centerX && id.centerZ == this.centerZ;
    }

    @Override
    public int hashCode() {
        long hilo = mostSigBits ^ leastSigBits;
        return Objects.hash(((int)(hilo >> 32)) ^ (int) hilo, centerX, centerZ, radius);
    }

    public boolean isInWorld(World world) {
        return world.getUID().getMostSignificantBits() == this.mostSigBits && world.getUID().getLeastSignificantBits() == this.leastSigBits;
    }

    public boolean contains(Location location) {
        if (!isInWorld(location.getWorld())) {
            return false;
        }
        double distanceSquared = NumberConversions.square(location.getX() - this.centerX) + NumberConversions.square(location.getZ() - this.centerZ);
        return distanceSquared <= radiusSquared;
    }
}
