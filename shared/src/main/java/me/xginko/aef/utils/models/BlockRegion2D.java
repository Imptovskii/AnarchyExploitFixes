package me.xginko.aef.utils.models;

import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.util.NumberConversions;

import java.util.Objects;
import java.util.UUID;

public class BlockRegion2D {

    private final UUID worldUID;
    private final double radius, radiusSquared, centerX, centerZ;

    public BlockRegion2D(UUID worldUID, double centerX, double centerZ, double radius) {
        this.worldUID = worldUID;
        this.centerX = centerX;
        this.centerZ = centerZ;
        this.radius = radius;
        this.radiusSquared = NumberConversions.square(radius);
    }

    public static BlockRegion2D of(UUID worldUID, double centerX, double centerZ, double radius) {
        return new BlockRegion2D(worldUID, centerX, centerZ, radius);
    }

    public static BlockRegion2D of(World world, double centerX, double centerZ, double radius) {
        return BlockRegion2D.of(world.getUID(), centerX, centerZ, radius);
    }

    public UUID getWorldUID() {
        return this.worldUID;
    }

    public double getRadius() {
        return this.radius;
    }

    public double getRadiusSquared() {
        return this.radiusSquared;
    }

    public double getCenterX() {
        return this.centerX;
    }

    public double getCenterZ() {
        return this.centerZ;
    }

    @Override
    public boolean equals(Object obj) {
        if (null == obj || obj.getClass() != BlockRegion2D.class)
            return false;
        BlockRegion2D blockRegion2D = (BlockRegion2D)obj;
        return blockRegion2D.worldUID.equals(this.worldUID) && blockRegion2D.centerX == this.centerX && blockRegion2D.centerZ == this.centerZ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.worldUID, this.centerX, this.centerZ, this.radius);
    }

    public boolean contains(Location location) {
        if (!location.getWorld().getUID().equals(this.worldUID)) {
            return false;
        }

        double distanceToCenterSquared =
                NumberConversions.square(location.getX() - this.centerX) +
                NumberConversions.square(location.getZ() - this.centerZ);

        return distanceToCenterSquared <= radiusSquared;
    }
}
