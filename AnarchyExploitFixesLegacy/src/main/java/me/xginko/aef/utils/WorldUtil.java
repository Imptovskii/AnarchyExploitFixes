package me.xginko.aef.utils;

import me.xginko.aef.AnarchyExploitFixes;
import org.bukkit.World;

import java.lang.invoke.MethodHandle;

public class WorldUtil {

    private static final MethodHandle GET_MIN_WORLD_HEIGHT, RESPAWNANCHOR_WORKS;
    private static final boolean GET_MIN_WORLD_HEIGHT_AVAILABLE, RESPAWN_ANCHOR_WORKS_AVAILABLE;

    static {
        GET_MIN_WORLD_HEIGHT_AVAILABLE = Crafty.hasMethod(World.class, "getMinHeight");
        GET_MIN_WORLD_HEIGHT = Crafty.findMethod(World.class, "getMinHeight", int.class);
        RESPAWN_ANCHOR_WORKS_AVAILABLE = Crafty.hasMethod(World.class, "isRespawnAnchorWorks");
        RESPAWNANCHOR_WORKS = Crafty.findMethod(World.class, "isRespawnAnchorWorks", boolean.class);
    }

    public static int getMinWorldHeight(World world) {
        if (!GET_MIN_WORLD_HEIGHT_AVAILABLE) {
            return getMinWorldHeightFromConfig(world);
        }

        try {
            return (int) GET_MIN_WORLD_HEIGHT.invoke(world);
        } catch (Throwable t) {
            AnarchyExploitFixes.prefixedLogger().error("Error getting min world height from world '{}'.", world.getName(), t);
            return getMinWorldHeightFromConfig(world);
        }
    }

    private static int getMinWorldHeightFromConfig(World world) {
        if (world.getEnvironment() == World.Environment.NORMAL) {
            return AnarchyExploitFixes.config().overworld_floor_min_y;
        } else {
            return AnarchyExploitFixes.config().nether_floor_min_y;
        }
    }

    public static boolean isRespawnAnchorWorks(World world) {
        if (!RESPAWN_ANCHOR_WORKS_AVAILABLE) {
            return world.getEnvironment() == World.Environment.NORMAL;
        }

        try {
            return (boolean) RESPAWNANCHOR_WORKS.invoke(world);
        } catch (Throwable t) {
            AnarchyExploitFixes.prefixedLogger().error("Error checking if respawn anchors work in world '{}'.", world.getName(), t);
            return world.getEnvironment() == World.Environment.NORMAL;
        }
    }
}
