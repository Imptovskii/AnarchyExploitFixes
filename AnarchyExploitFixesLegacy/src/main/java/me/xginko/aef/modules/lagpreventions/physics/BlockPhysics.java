package me.xginko.aef.modules.lagpreventions.physics;

import org.bukkit.Location;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.BlockPhysicsEvent;

public class BlockPhysics extends PhysicsModule {

    private final int limit;

    public BlockPhysics() {
        super("block-physics");
        this.config.addComment(configPath+".enable",
                "Limits block physics within a configurable radius and timeframe\n" +
                        "to help reduce lag by cancelling burst activity hotspots.\n" +
                        "\n" +
                        "Note:\n" +
                        "\n" +
                        "The event used for this check (BlockPhysicsEvent) is a high frequency event,\n" +
                        "it may be called thousands of times per a second on a busy server.\n" +
                        "Where possible the event may also only be called for the \"root\" block of\n" +
                        "physics updates in order to limit event spam.\n" +
                        "Physics updates that cause other blocks to change their state may not result\n" +
                        "in an event for each of those blocks (usually adjacent).");
        this.limit = config.getInt(configPath + ".block-physics-event-limit", 900,
                "Maximum number of times a physics check can be performed within the configured\n" +
                        "timeframe before they will be put on cooldown.");
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockPhysics(BlockPhysicsEvent event) {
        if (isCriticallyLagging()) {
            event.setCancelled(true);
            onLagExceeded(event);
            return;
        }

        Location location = event.getBlock().getLocation();
        RegionData regionData = getRegionData(location);

        if (System.currentTimeMillis() < regionData.resumeTime.get()) {
            event.setCancelled(true);
            return;
        }

        if (regionData.activityCount.incrementAndGet() > limit) {
            event.setCancelled(true);
            onLimitExceeded(location, regionData, limit);
        }
    }
}
