package me.xginko.aef.modules.lagpreventions.physics;

import org.bukkit.Location;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.BlockFormEvent;
import org.bukkit.event.block.BlockSpreadEvent;

public class BlockFormOrGrow extends PhysicsModule {

    private final int limit;

    public BlockFormOrGrow() {
        super("block-spread");
        config.addComment(configPath+".enable",
                "Limits blocks spreading or forming based on world conditions within a\n" +
                        "configurable radius and timeframe to help reduce lag by cancelling burst\n" +
                        "activity hotspots.\n" +
                        "\n" +
                        "Examples:\n" +
                        "\n" +
                        "- Snow forming due to a snow storm.\n" +
                        "- Ice forming in a snowy Biome like Taiga or Tundra.\n" +
                        "- Obsidian / Cobblestone forming due to contact with water.\n" +
                        "- Concrete forming due to mixing of concrete powder and water.\n" +
                        "- Mushrooms spreading.\n" +
                        "- Fire spreading.");
        this.limit = config.getInt(configPath + ".block-form-event-limit", 500,
                "Maximum number of times a block can form or spread within the configured\n" +
                        "timeframe before activity will be put on cooldown.");
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockForm(BlockFormEvent event) {
        if (isCriticallyLagging()) {
            event.setCancelled(true);
            onLagExceeded(event);
            return;
        }

        Location location = event.getBlock().getLocation();
        RegionData regionData = getRegionData(location);

        if (System.currentTimeMillis() < regionData.resumeTime.get()) {
            event.setCancelled(true);
            return;
        }

        if (regionData.activityCount.incrementAndGet() > limit) {
            event.setCancelled(true);
            onLimitExceeded(location, regionData, limit);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockSpread(BlockSpreadEvent event) {
        if (isCriticallyLagging()) {
            event.setCancelled(true);
            onLagExceeded(event);
            return;
        }

        Location location = event.getBlock().getLocation();
        RegionData regionData = getRegionData(location);

        if (System.currentTimeMillis() < regionData.resumeTime.get()) {
            event.setCancelled(true);
            return;
        }

        if (regionData.activityCount.incrementAndGet() > limit) {
            event.setCancelled(true);
            onLimitExceeded(location, regionData, limit);
        }
    }
}
