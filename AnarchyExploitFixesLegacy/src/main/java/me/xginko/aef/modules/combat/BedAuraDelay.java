package me.xginko.aef.modules.combat;

import com.cryptomorin.xseries.XMaterial;
import com.cryptomorin.xseries.XTag;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.models.ExpiringSet;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerInteractEvent;

import java.time.Duration;
import java.util.EnumSet;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

public class BedAuraDelay extends AEFModule implements Listener {

    private final ExpiringSet<UUID> breakCooldowns, placeCooldowns;
    private final Set<Material> beds;
    private final long breakDelayMillis, placeDelayMillis;

    public BedAuraDelay() {
        super("combat.bed-aura-delay");
        this.beds = XTag.BEDS.getValues().stream()
                .filter(XMaterial::isSupported)
                .map(XMaterial::parseMaterial)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.breakDelayMillis = config.getInt(configPath + ".break-delay-in-ticks", 5,
                "Set to -1 to disable.") * 50L;
        this.breakCooldowns = breakDelayMillis <= 0 ? null : new ExpiringSet<>(Duration.ofMillis(breakDelayMillis));
        this.placeDelayMillis = config.getInt(configPath + ".place-delay-in-ticks", -1) * 50L;
        this.placeCooldowns = placeDelayMillis <= 0 ? null : new ExpiringSet<>(Duration.ofMillis(placeDelayMillis));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBedBreak(PlayerInteractEvent event) {
        if (breakDelayMillis <= 0) return;
        if (event.getAction() != Action.RIGHT_CLICK_BLOCK) return;
        final Block clicked = event.getClickedBlock();
        if (!beds.contains(clicked.getType())) return;
        if (clicked.getWorld().getEnvironment() == World.Environment.NORMAL) return;

        if (breakCooldowns.contains(event.getPlayer().getUniqueId())) {
            event.setCancelled(true);
        } else {
            breakCooldowns.add(event.getPlayer().getUniqueId());
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBedPlace(BlockPlaceEvent event) {
        if (placeDelayMillis <= 0) return;
        final Block placed = event.getBlockPlaced();
        if (!beds.contains(placed.getType())) return;
        if (placed.getWorld().getEnvironment() == World.Environment.NORMAL) return;

        if (placeCooldowns.contains(event.getPlayer().getUniqueId())) {
            event.setCancelled(true);
        } else {
            placeCooldowns.add(event.getPlayer().getUniqueId());
        }
    }
}
