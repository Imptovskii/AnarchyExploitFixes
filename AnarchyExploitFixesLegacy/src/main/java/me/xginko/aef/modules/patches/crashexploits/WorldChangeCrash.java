package me.xginko.aef.modules.patches.crashexploits;

import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import me.xginko.aef.utils.models.ExpiringSet;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityTeleportEvent;

import java.time.Duration;
import java.util.UUID;

public class WorldChangeCrash extends AEFModule implements Listener {

    private final ExpiringSet<UUID> recentWorldChangers;
    private final boolean logIsEnabled;

    public WorldChangeCrash() {
        super("patches.prevent-fast-world-teleport-crash");
        this.recentWorldChangers = new ExpiringSet<>(Duration.ofMillis(
                Math.max(config.getInt(configPath + ".teleport-delay-millis", 1000,
                        "Time in milliseconds until an entity can teleport to\n" +
                        "another world again."), 1)));
        config.addComment(configPath + ".enable",
                "Prevents crash methods that involve very fast teleporting\n" +
                "between different worlds in a short time.");
        this.logIsEnabled = config.getBoolean(configPath + ".log", false);
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onTeleport(EntityTeleportEvent event) {
        if (event.getTo() == null) return;
        if (event.getFrom().getWorld().getUID().equals(event.getTo().getWorld().getUID())) return;

        if (recentWorldChangers.contains(event.getEntity().getUniqueId())) {
            event.setCancelled(true);
            if (logIsEnabled) info("Cancelled too fast world teleport of entity: " + event.getEntityType().name() +
                    " at " + LocationUtil.toString(event.getFrom()));
        } else {
            recentWorldChangers.add(event.getEntity().getUniqueId());
        }
    }
}
