package me.xginko.aef.modules.lagpreventions;

import com.cryptomorin.xseries.XMaterial;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.Location;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;

import java.time.Duration;
import java.util.UUID;

public class LeverSpam extends AEFModule implements Listener {

    private final Cache<Location, Integer> leverLocationCooldowns;
    private final Cache<UUID, Integer> playersUsingLeversCooldowns;
    private final int leverUsageLimit;
    private final boolean shouldKickPlayer, sendActionBar;

    public LeverSpam() {
        super("lag-preventions.prevent-lever-spam");
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath + ".enable", "Rate Limit levers to prevent a lag exploit.");
        this.sendActionBar = config.getBoolean(configPath + ".show-actionbar", true);
        this.shouldKickPlayer = config.getBoolean(configPath + ".kick-player", false);
        this.leverUsageLimit = config.getInt(configPath + ".max-lever-usages-per-time", 15);
        final long cacheTimeMillis = config.getInt(configPath + ".lever-time-in-ticks", 40) * 50L;
        this.leverLocationCooldowns = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(cacheTimeMillis)).build();
        this.playersUsingLeversCooldowns = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(cacheTimeMillis)).build();
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteract(PlayerInteractEvent event) {
        if (event.getAction() != Action.RIGHT_CLICK_BLOCK) return;
        Block clicked = event.getClickedBlock();
        if (clicked.getType() != XMaterial.LEVER.parseMaterial()) return;

        final Player player = event.getPlayer();

        final Location leverLoc = clicked.getLocation();
        Integer activationCount = leverLocationCooldowns.getIfPresent(leverLoc);
        if (activationCount == null) activationCount = 0;

        activationCount++;
        leverLocationCooldowns.put(leverLoc, activationCount);

        if (activationCount > leverUsageLimit) {
            event.setCancelled(true);
            if (shouldKickPlayer) {
                player.kickPlayer(AnarchyExploitFixes.getLang(player.getLocale()).lagpreventions_stopSpammingLevers);
                return;
            }
            if (sendActionBar) {
                player.sendActionBar(AnarchyExploitFixes.getLang(player.getLocale()).lagpreventions_stopSpammingLevers);
            }
            return;
        }

        final UUID playerUniqueId = player.getUniqueId();
        Integer leverFlickCount = playersUsingLeversCooldowns.getIfPresent(playerUniqueId);
        if (leverFlickCount == null) leverFlickCount = 0;

        leverFlickCount++;
        playersUsingLeversCooldowns.put(playerUniqueId, leverFlickCount);

        if (leverFlickCount > leverUsageLimit) {
            event.setCancelled(true);
            if (shouldKickPlayer) {
                player.kickPlayer(AnarchyExploitFixes.getLang(player.getLocale()).lagpreventions_stopSpammingLevers);
                return;
            }
            if (sendActionBar) {
                player.sendActionBar(AnarchyExploitFixes.getLang(player.getLocale()).lagpreventions_stopSpammingLevers);
            }
        }
    }
}