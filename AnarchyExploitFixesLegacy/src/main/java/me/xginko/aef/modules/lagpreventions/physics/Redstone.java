package me.xginko.aef.modules.lagpreventions.physics;

import org.bukkit.Location;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.BlockRedstoneEvent;

public class Redstone extends PhysicsModule {

    private final int limit;

    public Redstone() {
        super("redstone");
        this.config.addComment(configPath+".enable",
                "Limits redstone activity within a configurable radius and timeframe\n" +
                        "to help reduce lag by cancelling high activity hotspots.\n" +
                        "\n" +
                        "Examples:\n" +
                        "\n" +
                        "- A redstone current changes.\n" +
                        "- A redstone block gets powered on.\n" +
                        "- A redstone block gets powered off.\n");
        this.limit = config.getInt(configPath + ".redstone-event-limit", 5000,
                "Maximum number of redstone events within configured timeframe.");
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockRedstone(BlockRedstoneEvent event) {
        if (isCriticallyLagging()) {
            event.setNewCurrent(0);
            onLagExceeded(event);
            return;
        }

        Location location = event.getBlock().getLocation();
        RegionData regionData = getRegionData(location);

        if (System.currentTimeMillis() < regionData.resumeTime.get()) {
            event.setNewCurrent(0);
            return;
        }

        if (regionData.activityCount.incrementAndGet() > limit) {
            event.setNewCurrent(0);
            onLimitExceeded(location, regionData, limit);
        }
    }
}
