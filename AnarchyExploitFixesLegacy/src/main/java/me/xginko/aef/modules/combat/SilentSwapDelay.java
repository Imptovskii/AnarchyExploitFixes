package me.xginko.aef.modules.combat;

import com.cryptomorin.xseries.XEntityType;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.models.ExpiringSet;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerItemHeldEvent;

import java.time.Duration;
import java.util.UUID;

public class SilentSwapDelay extends AEFModule implements Listener {

    private final ExpiringSet<UUID> swapItemCooldowns;

    public SilentSwapDelay() {
        super("combat.crystal-aura.silent-swap-delay");
        this.swapItemCooldowns = new ExpiringSet<>(Duration.ofMillis(Math.max(1L,
                config.getLong(configPath + ".min-swap-delay-millis", 40L,
                        "The delay in millis a player cant swap hotbar items after placing\n" +
                                "a block, clicking a block (for example to place a crystal) or\n" +
                                "damaging an entity. (50 ms = 1 tick)"))));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerItemHeld(PlayerItemHeldEvent event) { // Fired when a hot bar item selection changes
        if (swapItemCooldowns.contains(event.getPlayer().getUniqueId())) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onEntityDamageByEntity(EntityDamageByEntityEvent event) {
        if (event.getDamager().getType() == XEntityType.PLAYER.get()) {
            swapItemCooldowns.add(event.getDamager().getUniqueId());
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerInteract(PlayerInteractEvent event) {
        swapItemCooldowns.add(event.getPlayer().getUniqueId());
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        swapItemCooldowns.add(event.getPlayer().getUniqueId());
    }
}