package me.xginko.aef.modules.combat;

import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.WorldUtil;
import me.xginko.aef.utils.models.ExpiringSet;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerInteractEvent;

import java.time.Duration;
import java.util.UUID;

public class AnchorAuraDelay extends AEFModule implements Listener {

    private final ExpiringSet<UUID> placeCooldowns, breakCooldowns;
    private final Material GLOWSTONE;
    private final long placeDelayMillis, breakDelayMillis;
    private final boolean updateInv;

    public AnchorAuraDelay() {
        super("combat.anchor-aura-delay");
        this.GLOWSTONE = XMaterial.GLOWSTONE.parseMaterial();
        this.updateInv = config.getBoolean(configPath + ".update-inventory-on-cancel", false,
                "Can help with desync but recommended to leave off unless needed.");
        this.placeDelayMillis = config.getInt(configPath + ".place-delay-in-ticks", 8) * 50L;
        this.placeCooldowns = placeDelayMillis <= 0 ? null : new ExpiringSet<>(Duration.ofMillis(placeDelayMillis));
        this.breakDelayMillis = config.getInt(configPath + ".break-delay-in-ticks", -1) * 50L;
        this.breakCooldowns = breakDelayMillis <= 0 ? null : new ExpiringSet<>(Duration.ofMillis(breakDelayMillis));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onAnchorBreak(PlayerInteractEvent event) {
        if (breakDelayMillis <= 0) return;
        if (event.getAction() != Action.RIGHT_CLICK_BLOCK) return;
        if (event.getClickedBlock().getType() != XMaterial.RESPAWN_ANCHOR.parseMaterial()) return;
        if (event.getItem() == null || event.getItem().getType() != XMaterial.GLOWSTONE.parseMaterial()) return;
        if (WorldUtil.isRespawnAnchorWorks(event.getPlayer().getWorld())) return;

        if (breakCooldowns.contains(event.getPlayer().getUniqueId())) {
            event.setCancelled(true);
            if (updateInv) event.getPlayer().updateInventory();
        } else {
            breakCooldowns.add(event.getPlayer().getUniqueId());
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onAnchorPlace(BlockPlaceEvent event) {
        if (placeDelayMillis <= 0) return;
        if (event.getBlock().getType() != XMaterial.RESPAWN_ANCHOR.parseMaterial()) return;
        if (WorldUtil.isRespawnAnchorWorks(event.getPlayer().getWorld())) return;

        if (placeCooldowns.contains(event.getPlayer().getUniqueId())) {
            event.setCancelled(true);
            if (updateInv) event.getPlayer().updateInventory();
        } else {
            placeCooldowns.add(event.getPlayer().getUniqueId());
        }
    }
}