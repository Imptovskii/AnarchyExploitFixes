package me.xginko.aef.modules.combat;

import com.cryptomorin.xseries.XMaterial;
import io.papermc.lib.PaperLib;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.GameMode;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerMoveEvent;

public class Burrow extends AEFModule implements Listener {

    private final Material SAND, GRAVEL, DIRT, ENCHANTING_TABLE, ENDER_CHEST, BEACON;
    private final double damageWhenMovingInBurrow;
    private final boolean shouldTeleportUp, preventIfBlockAboveBurrow, breakAnvilInsteadOfTP, allowSlabs;

    public Burrow() {
        super("combat.prevent-burrow");
        // Other cached parsed material
        this.SAND = XMaterial.SAND.parseMaterial();
        this.GRAVEL = XMaterial.GRAVEL.parseMaterial();
        this.ENCHANTING_TABLE = XMaterial.ENCHANTING_TABLE.parseMaterial();
        this.ENDER_CHEST = XMaterial.ENDER_CHEST.parseMaterial();
        this.BEACON = XMaterial.BEACON.parseMaterial();
        this.DIRT = XMaterial.DIRT.parseMaterial();

        this.damageWhenMovingInBurrow = config.getDouble(configPath + ".damage-when-moving",1.0,
                "1.0 = Half a heart of damage every time you move.");
        this.shouldTeleportUp = config.getBoolean(configPath + ".teleport-above-block", true);
        this.preventIfBlockAboveBurrow = config.getBoolean(configPath + ".prevent-if-block-above-burrow", false,
                "Prevent burrow even if there is a block above the block they\n" +
                        "are burrowing in.\n" +
                        "Please note this may allow creating an \"elevator\", players will\n" +
                        "keep teleporting up until they hit air.");
        this.breakAnvilInsteadOfTP = config.getBoolean(configPath + ".break-anvil-instead-of-teleport", true);
        boolean slabsAreAllowed = config.getBoolean(configPath + ".allow-slabs-in-burrow", true,
                "Needs to be enabled to prevent a bug where players are teleported\n" +
                        "above a slab when the slab is underwater.");
        this.allowSlabs = PaperLib.getMinecraftVersion() > 12 && slabsAreAllowed;
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    private void teleportUpAndCenter(Player player, Location from) {
         player.teleport(from.clone().add(0.5, 1, 0.5));
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onSelfPlace(BlockPlaceEvent event) {
        final Location blockLoc = event.getBlock().getLocation();
        Location legsLoc = event.getPlayer().getLocation().toBlockLocation();
        if (legsLoc.equals(blockLoc) || legsLoc.add(0, 1, 0).equals(blockLoc)) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.getGameMode().equals(GameMode.SURVIVAL)) return;
        if (player.isInsideVehicle() || player.isGliding()) return;
        
        final Location playerLocation = player.getLocation();
        final Block burrowBlock = playerLocation.getBlock();
        final Material burrowMaterial = burrowBlock.getType();

        if (
                burrowMaterial.equals(Material.AIR)
                || burrowMaterial.equals(DIRT) // Fixes false positives when trampling farmland
                || burrowMaterial.equals(SAND)
                || burrowMaterial.equals(GRAVEL)
                || MaterialUtil.SHULKER_BOXES.contains(burrowMaterial)
        ) return;

        if (preventIfBlockAboveBurrow || burrowBlock.getRelative(BlockFace.UP).getType().equals(Material.AIR)) {

            // Occluding Blocks
            if (burrowMaterial.isOccluding() && !MaterialUtil.SINK_IN_BLOCKS.contains(burrowMaterial)) {
                if (!allowSlabs || !MaterialUtil.SLAB_LIKE.contains(burrowMaterial)) {
                    player.damage(damageWhenMovingInBurrow);
                    if (shouldTeleportUp) teleportUpAndCenter(player, burrowBlock.getLocation());
                }
                return;
            }

            // Ender chests and blocks that are slightly lower in height
            if (burrowMaterial.equals(ENDER_CHEST) || MaterialUtil.SINK_IN_BLOCKS.contains(burrowMaterial)) {
                if (playerLocation.getY() - playerLocation.getBlockY() < 0.875) {
                    player.damage(damageWhenMovingInBurrow);
                    if (shouldTeleportUp) teleportUpAndCenter(player, burrowBlock.getLocation());
                }
                return;
            }

            // Enchantment Tables
            if (burrowMaterial.equals(ENCHANTING_TABLE)) {
                if (playerLocation.getY() - playerLocation.getBlockY() < 0.75) {
                    player.damage(damageWhenMovingInBurrow);
                    if (shouldTeleportUp) teleportUpAndCenter(player, burrowBlock.getLocation());
                }
                return;
            }

            // Anvils
            if (MaterialUtil.ANVILS.contains(burrowMaterial)) {
                player.damage(damageWhenMovingInBurrow);
                if (breakAnvilInsteadOfTP) {
                    burrowBlock.breakNaturally();
                } else {
                    if (shouldTeleportUp) teleportUpAndCenter(player, burrowBlock.getLocation());
                }
                return;
            }

            // Beacons and Indestructibles
            if (burrowMaterial.equals(BEACON) || MaterialUtil.SOLID_INDESTRUCTIBLES.contains(burrowMaterial)) {
                player.damage(damageWhenMovingInBurrow);
                if (shouldTeleportUp) teleportUpAndCenter(player, burrowBlock.getLocation());
            }
        }
    }
}