package me.xginko.aef.modules.lagpreventions.physics;

import org.bukkit.Location;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.BlockExplodeEvent;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.event.entity.ExplosionPrimeEvent;

public class Explosions extends PhysicsModule {

    private final int limit;

    public Explosions() {
        super("explosions");
        this.limit = config.getInt(configPath + ".explode-event-limit", 5000,
                "Maximum number of explode events within configured timeframe.");
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onExplodePrime(ExplosionPrimeEvent event) {
        if (isCriticallyLagging()) {
            event.setCancelled(true);
            onLagExceeded(event);
            return;
        }

        Location location = event.getEntity().getLocation();
        RegionData regionData = getRegionData(location);

        if (System.currentTimeMillis() < regionData.resumeTime.get()) {
            event.setCancelled(true);
            return;
        }

        if (regionData.count.incrementAndGet() > limit) {
            event.setCancelled(true);
            onLimitExceeded(event, location, limit, regionData);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntityExplode(EntityExplodeEvent event) {
        if (isCriticallyLagging()) {
            event.setCancelled(true);
            onLagExceeded(event);
            return;
        }

        RegionData regionData = getRegionData(event.getLocation());

        if (System.currentTimeMillis() < regionData.resumeTime.get()) {
            event.setCancelled(true);
            return;
        }

        if (regionData.count.incrementAndGet() > limit) {
            event.setCancelled(true);
            onLimitExceeded(event, event.getLocation(), limit, regionData);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockExplode(BlockExplodeEvent event) {
        if (isCriticallyLagging()) {
            event.setCancelled(true);
            onLagExceeded(event);
            return;
        }

        Location location = event.getBlock().getLocation();
        RegionData regionData = getRegionData(location);

        if (System.currentTimeMillis() < regionData.resumeTime.get()) {
            event.setCancelled(true);
            return;
        }

        if (regionData.count.incrementAndGet() > limit) {
            event.setCancelled(true);
            onLimitExceeded(event, location, limit, regionData);
        }
    }
}
