package me.xginko.aef.modules.combat;

import com.cryptomorin.xseries.XMaterial;
import com.cryptomorin.xseries.XTag;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.models.ExpiringSet;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerItemHeldEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import java.time.Duration;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

public class CrystalAuraHotbarSwitchDelay extends AEFModule implements Listener {

    private final ExpiringSet<UUID> hotbarItemSwitchCooldowns;
    private final Set<Material> blacklistedSwitchMaterials;
    private final boolean onlyForSpecificMaterials;

    public CrystalAuraHotbarSwitchDelay() {
        super("combat.crystal-aura.hotbar-switch-delay");
        final long switchAwayFromCrystalsDelayInMillis = Math.max(config.getInt(configPath + ".delay-in-ticks", 2,
                "Delay between switching from an end crystal to other items in hotbar"), 1) * 50L;
        this.hotbarItemSwitchCooldowns = new ExpiringSet<>(Duration.ofMillis(switchAwayFromCrystalsDelayInMillis));
        this.onlyForSpecificMaterials = config.getBoolean(configPath + ".only-delay-specific-materials", true,
                "Only delay when switched to specific materials");

        Set<XMaterial> defaults = new HashSet<>();
        defaults.addAll(Arrays.stream(XMaterial.values())
                .filter(xMaterial -> xMaterial.name().endsWith("_AXE") || xMaterial.name().endsWith("_SWORD"))
                .collect(Collectors.toSet()));
        defaults.addAll(XTag.BEDS.getValues());
        defaults.add(XMaterial.BOW);
        defaults.add(XMaterial.CROSSBOW);

        List<String> versionDefaults = defaults.stream()
                .filter(XMaterial::isSupported)
                .map(xMaterial -> xMaterial.parseMaterial().name())
                .distinct()
                .sorted()
                .collect(Collectors.toList());

        this.blacklistedSwitchMaterials = config.getList(configPath + ".delayed-specific-materials", versionDefaults)
                .stream()
                .map(configuredMaterial -> {
                    try {
                        return Material.valueOf(configuredMaterial);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredMaterial);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onHotbarSwitch(PlayerItemHeldEvent event) {
        if (!hotbarItemSwitchCooldowns.contains(event.getPlayer().getUniqueId())) {
            hotbarItemSwitchCooldowns.add(event.getPlayer().getUniqueId());
            return;
        }

        final PlayerInventory playerInventory = event.getPlayer().getInventory();

        final ItemStack previouslyHeldItem = playerInventory.getItem(event.getPreviousSlot());
        if (previouslyHeldItem == null || previouslyHeldItem.getType() != XMaterial.END_CRYSTAL.parseMaterial()) return;

        final ItemStack newHeldItem = playerInventory.getItem(event.getNewSlot());
        if (newHeldItem == null || newHeldItem.getType() == XMaterial.END_CRYSTAL.parseMaterial()) return;

        if (onlyForSpecificMaterials && !blacklistedSwitchMaterials.contains(newHeldItem.getType())) return;

        event.setCancelled(true);
    }
}