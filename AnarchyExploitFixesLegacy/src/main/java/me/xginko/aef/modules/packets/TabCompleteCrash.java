package me.xginko.aef.modules.packets;

import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientTabComplete;
import org.bukkit.permissions.ServerOperator;

public class TabCompleteCrash extends PacketModule {

    private static final String[] ABUSABLE_SEQUENCES = { "@", "[", "nbt", "=", "{", "}", "]" };
    private final boolean log, kick;

    public TabCompleteCrash() {
        super("patches.tab-complete-crash-patch", PacketListenerPriority.HIGHEST);
        config.addComment(configPath + ".enable",
                "Patches two lag exploits and an instant server shutdown exploit that\n" +
                "works by sending a malicious TabComplete packet that triggers a\n" +
                "StackOverflowError inside the TagParser class.");
        this.log = config.getBoolean(configPath + ".log", false);
        this.kick = config.getBoolean(configPath + ".kick-player", false);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", true);
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.isCancelled()) return;
        if (event.getPacketType() != PacketType.Play.Client.TAB_COMPLETE) return;

        final String text = new WrapperPlayClientTabComplete(event).getText();
        int length = text.length();

        if (length > 256) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
            return;
        }

        if (length > 64) {
            final int index = text.indexOf(' ');
            if (index == -1 || index >= 64) {
                event.setCancelled(true);
                onCancel(log, kick, event.getUser());
                return;
            }
        }

        if (event.getPlayer() == null || ((ServerOperator) event.getPlayer()).isOp()) return;

        for (String sequence : ABUSABLE_SEQUENCES) {
            if (text.indexOf(sequence) != -1) {
                event.setCancelled(true);
                onCancel(log, kick, event.getUser());
                return;
            }
        }
    }
}
