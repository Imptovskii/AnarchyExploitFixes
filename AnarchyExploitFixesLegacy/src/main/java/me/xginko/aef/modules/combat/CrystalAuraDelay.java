package me.xginko.aef.modules.combat;

import com.cryptomorin.xseries.XEntityType;
import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerKickEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

public class CrystalAuraDelay extends AEFModule implements Listener {

    private final Map<UUID, Long> breakCooldowns, placeCooldowns;
    private final long breakDelayNanos, placeDelayNanos;
    private final boolean updateInventory;

    public CrystalAuraDelay() {
        super("combat.crystal-aura.regular-delay");
        this.breakCooldowns = new ConcurrentHashMap<>();
        this.breakDelayNanos = TimeUnit.MILLISECONDS.toNanos(
                config.getLong(configPath + ".break-delay-millis", 200, "1 tick = 50 ms"));
        this.placeCooldowns = new ConcurrentHashMap<>();
        this.placeDelayNanos = TimeUnit.MILLISECONDS.toNanos(
                config.getLong(configPath + ".place-delay-millis", 0, "1 tick = 50 ms"));
        this.updateInventory = config.getBoolean(configPath + ".update-inventory-on-cancel", false,
                "Can help with desync but recommended to leave off unless you have issues.");
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntityDamageByEntity(EntityDamageByEntityEvent event) {
        if (breakDelayNanos <= 0) return;
        if (event.getEntityType() != XEntityType.END_CRYSTAL.get()) return;
        if (event.getDamager().getType() != XEntityType.PLAYER.get()) return;

        if (
                breakCooldowns.containsKey(event.getDamager().getUniqueId())
                && breakCooldowns.get(event.getDamager().getUniqueId()) > System.nanoTime()
        ) {
            event.setCancelled(true);
            if (updateInventory) ((Player) event.getDamager()).updateInventory();
        } else {
            breakCooldowns.put(event.getDamager().getUniqueId(), System.nanoTime() + breakDelayNanos);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerInteract(PlayerInteractEvent event) {
        if (placeDelayNanos <= 0) return;
        if (event.getAction() != Action.RIGHT_CLICK_BLOCK) return; // Need to right-click a block to place a crystal
        if (event.getItem() == null || event.getItem().getType() != XMaterial.END_CRYSTAL.parseMaterial()) return;

        if (
                placeCooldowns.containsKey(event.getPlayer().getUniqueId())
                && placeCooldowns.get(event.getPlayer().getUniqueId()) > System.nanoTime()
        ) {
            event.setCancelled(true);
            if (updateInventory) event.getPlayer().updateInventory();
        } else {
            placeCooldowns.put(event.getPlayer().getUniqueId(), System.nanoTime() + placeDelayNanos);
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        placeCooldowns.remove(event.getPlayer().getUniqueId());
        breakCooldowns.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerKick(PlayerKickEvent event) {
        placeCooldowns.remove(event.getPlayer().getUniqueId());
        breakCooldowns.remove(event.getPlayer().getUniqueId());
    }
}