package me.xginko.aef.modules.combat;

import com.destroystokyo.paper.MaterialTags;
import io.papermc.paper.event.player.PlayerBedFailEnterEvent;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.models.ExpiringSet;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;

import java.time.Duration;
import java.util.UUID;

public class BedAuraDelay extends AEFModule implements Listener {
    
    private final ExpiringSet<UUID> breakCooldowns, placeCooldowns;
    private final long breakDelayMillis, placeDelayMillis;
    
    public BedAuraDelay() {
        super("combat.bed-aura-delay");
        this.breakDelayMillis = config.getInt(configPath + ".break-delay-in-ticks", 5,
                "Set to -1 to disable.") * 50L;
        this.breakCooldowns = breakDelayMillis <= 0 ? null : new ExpiringSet<>(Duration.ofMillis(breakDelayMillis));
        this.placeDelayMillis = config.getInt(configPath + ".place-delay-in-ticks", -1) * 50L;
        this.placeCooldowns = placeDelayMillis <= 0 ? null : new ExpiringSet<>(Duration.ofMillis(placeDelayMillis));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBedBreak(PlayerBedFailEnterEvent event) {
        if (breakDelayMillis <= 0 || !event.getWillExplode()) return;

        if (breakCooldowns.contains(event.getPlayer().getUniqueId())) {
            event.setCancelled(true);
        } else {
            breakCooldowns.add(event.getPlayer().getUniqueId());
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBedPlace(BlockPlaceEvent event) {
        if (placeDelayMillis <= 0) return;
        if (!MaterialTags.BEDS.isTagged(event.getBlockPlaced()) || event.getBlockPlaced().getWorld().isBedWorks()) return;

        if (placeCooldowns.contains(event.getPlayer().getUniqueId())) {
            event.setCancelled(true);
        } else {
            placeCooldowns.add(event.getPlayer().getUniqueId());
        }
    }
}