package me.xginko.aef.modules.illegals.items;

import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.Damageable;

import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class Unbreakables extends IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private final boolean useWhitelist, blacklistMode, checkStored;

    public Unbreakables() {
        super("illegals.revert-unbreakables", AEFPermission.BYPASS_ILLEGAL_UNBREAKABLE);
        config.addComment(configPath + ".enable",
                "Bypass permission: " + bypassPermission.string() + "\n" +
                "Deletes and prevents usage of unbreakable items.\n" +
                "This can be anything from items with illegal damage attributes to\n" +
                "Metadata/NBT tags.\n" +
                "Note: Due to the limitations of the API, we can only fully prevent\n" +
                "usage of these items by deleting them.");
        this.useWhitelist = config.getBoolean(configPath + ".item-whitelist-enabled", false);
        this.blacklistMode = config.getBoolean(configPath + ".use-as-blacklist-instead", false);
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false,
                "Will delete shulkers and bundles if they contain unbreakables.");
        this.whitelistedTypes = config.getList(configPath + ".whitelisted-items", List.of("DIAMOND_CHESTPLATE"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir() || !itemStack.hasItemMeta()) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            if (itemStack.getItemMeta().isUnbreakable()) {
                return ItemLegality.ILLEGAL;
            }

            Damageable damageable = (Damageable) itemStack.getItemMeta();

            if (!damageable.hasDamage()) {
                return ItemLegality.LEGAL;
            }

            if (itemStack.getType().getMaxDurability() == 0) {
                return ItemLegality.LEGAL;
            }

            if (damageable.getDamage() > itemStack.getType().getMaxDurability() || damageable.getDamage() < 0) {
                return ItemLegality.ILLEGAL;
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        // We need to always take action here as we cant reliably prevent usage otherwise
        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
