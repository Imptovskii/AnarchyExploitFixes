package me.xginko.aef.modules.combat;

import com.cryptomorin.xseries.XEntityType;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerItemHeldEvent;
import org.bukkit.event.player.PlayerKickEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

public class SilentSwapDelay extends AEFModule implements Listener {

    private final Map<UUID, AtomicLong> swapItemResumeTimes;
    private final long swapDelayMillis;

    public SilentSwapDelay() {
        super("combat.crystal-aura.silent-swap-delay");
        this.swapItemResumeTimes = new ConcurrentHashMap<>();
        this.swapDelayMillis = config.getLong(configPath + ".min-swap-delay-millis", 40L,
                "The delay in millis a player cant swap hotbar items after placing\n" +
                        "a block, clicking a block (for example to place a crystal) or\n" +
                        "damaging an entity. (50 ms = 1 tick)");
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerItemHeld(PlayerItemHeldEvent event) { // Fired when a hot bar item selection changes
        if (swapItemResumeTimes.computeIfAbsent(event.getPlayer().getUniqueId(), k -> new AtomicLong()).get() > System.currentTimeMillis()) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onEntityDamageByEntity(EntityDamageByEntityEvent event) {
        if (event.getDamager().getType() != XEntityType.PLAYER.get()) return;

        swapItemResumeTimes.computeIfAbsent(event.getDamager().getUniqueId(), k -> new AtomicLong())
                .set(System.currentTimeMillis() + swapDelayMillis);
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerInteract(PlayerInteractEvent event) {
        swapItemResumeTimes.computeIfAbsent(event.getPlayer().getUniqueId(), k -> new AtomicLong())
                .set(System.currentTimeMillis() + swapDelayMillis);
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        swapItemResumeTimes.computeIfAbsent(event.getPlayer().getUniqueId(), k -> new AtomicLong())
                .set(System.currentTimeMillis() + swapDelayMillis);
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        swapItemResumeTimes.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerKick(PlayerKickEvent event) {
        swapItemResumeTimes.remove(event.getPlayer().getUniqueId());
    }
}