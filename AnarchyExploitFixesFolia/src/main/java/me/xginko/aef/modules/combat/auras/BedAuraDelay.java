package me.xginko.aef.modules.combat.auras;

import com.destroystokyo.paper.MaterialTags;
import io.papermc.paper.event.player.PlayerBedFailEnterEvent;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.BlockPlaceEvent;

import java.util.Map;

public class BedAuraDelay extends AuraDelayModule {
    
    public BedAuraDelay() {
        super("combat.bed-aura-delay", 250, 0);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerBedFailEnter(PlayerBedFailEnterEvent event) {
        if (!event.getWillExplode()) return;

        for (Map.Entry<SettingType, Cooldowns> entry : cooldownSettings.entrySet()) {
            if (entry.getKey() != SettingType.GLOBAL && entry.getKey().slot != event.getPlayer().getActiveItemHand()) continue;

            if (isOnCooldown(event.getPlayer().getUniqueId(), entry.getValue().breakCooldowns, entry.getValue().breakDelayNanos)) {
                event.setCancelled(true);
                if (updateInventory) event.getPlayer().updateInventory();
                return;
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (!MaterialTags.BEDS.isTagged(event.getBlockPlaced()) || event.getBlockPlaced().getWorld().isBedWorks()) return;

        for (Map.Entry<SettingType, Cooldowns> entry : cooldownSettings.entrySet()) {
            if (entry.getKey() != SettingType.GLOBAL && entry.getKey().slot != event.getHand()) continue;

            if (isOnCooldown(event.getPlayer().getUniqueId(), entry.getValue().placeCooldowns, entry.getValue().placeDelayNanos)) {
                event.setCancelled(true);
                if (updateInventory) event.getPlayer().updateInventory();
                return;
            }
        }
    }
}