package me.xginko.aef.modules.lagpreventions.physics;

import org.bukkit.Location;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.SculkBloomEvent;

public class SculkBloom extends PhysicsModule {

    private final int limit;

    public SculkBloom() {
        super("sculk-bloom");
        this.config.addComment(configPath,
                "Limits sculk blooming within a configurable radius and timeframe\n" +
                        "to help reduce lag by cancelling high activity hotspots.\n" +
                        "\n" +
                        "Examples:\n" +
                        "\n" +
                        "- An entity was killed and dropped experience within an 8-block\n" +
                        "  radius of a SculkCatalyst." +
                        "- A plugin used SculkCatalyst.bloom(Block, int)");
        this.limit = config.getInt(configPath + ".sculk-bloom-limit", 300,
                "Maximum number of sculk bloom events within the configured timeframe.");
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onSkulkBloom(SculkBloomEvent event) {
        if (isCriticallyLagging()) {
            event.setCancelled(true);
            onLagExceeded(event);
            return;
        }

        Location location = event.getBlock().getLocation();
        RegionData regionData = getRegionData(location);

        if (System.currentTimeMillis() < regionData.resumeTime.get()) {
            event.setCancelled(true);
            return;
        }

        if (regionData.activityCount.incrementAndGet() > limit) {
            event.setCancelled(true);
            onLimitExceeded(location, regionData, limit);
        }
    }
}
